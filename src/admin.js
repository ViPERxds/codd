// Admin Panel JavaScript

class AdminPanel {
    constructor() {
        this.newsData = null;
        this.currentTab = 'list';
        this.editingNewsId = null;
        this.init();
    }

    async init() {
        try {
            await this.loadNewsData();
            this.setupEventListeners();
            this.renderNewsList();
            this.updateStats();
            this.setDefaultDate();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }

    async loadNewsData() {
        try {
            const response = await fetch('src/news-data.json');
            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
            }
            this.newsData = await response.json();
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
            // Fallback - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.newsData = {
                "news": [
                    {
                        "id": 1,
                        "title": "–í –°–º–æ–ª–µ–Ω—Å–∫–µ –∑–∞–ø—É—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤",
                        "excerpt": "–ù–∞ 10 –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞—Ö –≥–æ—Ä–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥—É–ª–∏—Ä—É—é—Ç –≤—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ 30%.",
                        "content": "–°–µ–≥–æ–¥–Ω—è –≤ –°–º–æ–ª–µ–Ω—Å–∫–µ —Å–æ—Å—Ç–æ—è–ª—Å—è –∑–∞–ø—É—Å–∫ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤. –ü—Ä–æ–µ–∫—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¶–µ–Ω—Ç—Ä–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –°–º–æ–ª–µ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã \"–£–º–Ω—ã–π –≥–æ—Ä–æ–¥\".\n\n## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n\n–ù–æ–≤—ã–µ —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã –æ—Å–Ω–∞—â–µ–Ω—ã:\n- –î–∞—Ç—á–∏–∫–∞–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n- –ö–∞–º–µ—Ä–∞–º–∏ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n- –°–∏—Å—Ç–µ–º–æ–π —Å–≤—è–∑–∏ —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∏–º –ø—É–Ω–∫—Ç–æ–º\n- –ê–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–∏–∫–ª–æ–≤\n\n## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è\n\n–ó–∞ –ø–µ—Ä–≤—ã–µ –¥–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n- –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ 30%\n- –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø—Ä–æ–±–æ–∫ –Ω–∞ 25%\n- –°–Ω–∏–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ CO2 –Ω–∞ 15%\n- –ü–æ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è",
                        "date": "2025-01-15",
                        "category": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                        "tags": ["–£–º–Ω—ã–µ —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–°–º–æ–ª–µ–Ω—Å–∫", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"],
                        "featured": true,
                        "image": "üö¶"
                    },
                    {
                        "id": 2,
                        "title": "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–∞–º–µ—Ä—ã –Ω–∞ –æ–ø–∞—Å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö",
                        "excerpt": "–í —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–≤—ã—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 15 –Ω–æ–≤—ã—Ö –∫–∞–º–µ—Ä –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –Ω–∞ –∞–≤–∞—Ä–∏–π–Ω–æ-–æ–ø–∞—Å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö –¥–æ—Ä–æ–≥.",
                        "content": "–¶–û–î–î –°–º–æ–ª–µ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ –ø–æ–≤—ã—à–µ–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è. –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ 15 –Ω–æ–≤—ã—Ö –∫–∞–º–µ—Ä –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ –∞–≤–∞—Ä–∏–π–Ω–æ-–æ–ø–∞—Å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö –¥–æ—Ä–æ–≥ —Ä–µ–≥–∏–æ–Ω–∞.",
                        "date": "2025-01-12",
                        "category": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                        "tags": ["–ö–∞–º–µ—Ä—ã", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ"],
                        "featured": false,
                        "image": "üìπ"
                    }
                ]
            };
        }
    }

    async saveNewsData() {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ', 'success');
            console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', this.newsData);
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
        }
    }

    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tab = e.target.dataset.tab;
                this.switchTab(tab);
            });
        });

        // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
        document.getElementById('add-news-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.addNews();
        });

        // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
        document.getElementById('edit-news-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveEdit();
        });

        // –ü–æ–∏—Å–∫
        document.getElementById('search-news').addEventListener('input', (e) => {
            this.filterNews(e.target.value);
        });

        // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        document.getElementById('preview-btn').addEventListener('click', () => {
            this.showPreview();
        });

        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        document.querySelectorAll('.modal-close').forEach(btn => {
            btn.addEventListener('click', () => {
                this.closeModal();
            });
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeModal();
                }
            });
        });

        // –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç
        document.getElementById('export-btn').addEventListener('click', () => {
            this.exportData();
        });

        document.getElementById('import-btn').addEventListener('click', () => {
            document.getElementById('import-file').click();
        });

        document.getElementById('import-file').addEventListener('change', (e) => {
            this.importData(e.target.files[0]);
        });

        document.getElementById('backup-btn').addEventListener('click', () => {
            this.createBackup();
        });

        // –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
        document.querySelectorAll('#add-news-form input, #add-news-form textarea, #add-news-form select').forEach(field => {
            field.addEventListener('input', () => {
                field.classList.remove('field-error');
            });
        });
    }

    switchTab(tabName) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        document.getElementById(`${tabName}-tab`).classList.add('active');

        this.currentTab = tabName;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Å–ø–∏—Å–æ–∫
        if (tabName === 'list') {
            this.renderNewsList();
        } else if (tabName === 'settings') {
            this.updateStats();
        }
    }

    renderNewsList() {
        const newsList = document.getElementById('news-list');
        if (!newsList) return;

        if (!this.newsData.news || this.newsData.news.length === 0) {
            newsList.innerHTML = `
                <div class="empty-state">
                    <h3>üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∫–ª–∞–¥–∫—É "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"</p>
                </div>
            `;
            return;
        }

        newsList.innerHTML = this.newsData.news.map(news => `
            <div class="news-item ${news.featured ? 'featured' : ''}" data-id="${news.id}">
                <div class="news-item-header">
                    <div class="news-item-info">
                        <h3>${news.title}</h3>
                        <div class="news-item-meta">
                            <span class="date">${this.formatDate(news.date)}</span>
                            <span class="category">${news.category}</span>
                            ${news.featured ? '<span class="featured-badge">–ì–ª–∞–≤–Ω–∞—è</span>' : ''}
                        </div>
                    </div>
                </div>
                <div class="news-item-excerpt">${news.excerpt}</div>
                <div class="news-item-actions">
                    <button class="btn btn-primary btn-sm" onclick="adminPanel.editNews(${news.id})">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-secondary btn-sm" onclick="adminPanel.duplicateNews(${news.id})">
                        üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-danger btn-sm" onclick="adminPanel.deleteNews(${news.id})">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    filterNews(searchTerm) {
        const newsItems = document.querySelectorAll('.news-item');
        const term = searchTerm.toLowerCase();

        newsItems.forEach(item => {
            const title = item.querySelector('h3').textContent.toLowerCase();
            const excerpt = item.querySelector('.news-item-excerpt').textContent.toLowerCase();
            
            if (title.includes(term) || excerpt.includes(term)) {
                item.style.display = 'block';
            } else {
                item.style.display = 'none';
            }
        });
    }

    addNews() {
        const formData = this.getFormData('add-news-form');
        
        if (!this.validateFormData(formData)) {
            return;
        }

        const newId = Math.max(...this.newsData.news.map(n => n.id), 0) + 1;
        const newNews = {
            id: newId,
            ...formData,
            tags: formData.tags.split(',').map(tag => tag.trim()).filter(tag => tag)
        };

        this.newsData.news.unshift(newNews);
        this.saveNewsData();
        this.showNotification('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
        this.switchTab('list');
        document.getElementById('add-news-form').reset();
        this.setDefaultDate();
    }

    editNews(id) {
        const news = this.newsData.news.find(n => n.id === id);
        if (!news) return;

        this.editingNewsId = id;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('edit-news-id').value = news.id;
        document.getElementById('edit-news-title').value = news.title;
        document.getElementById('edit-news-excerpt').value = news.excerpt;
        document.getElementById('edit-news-content').value = news.content;
        document.getElementById('edit-news-date').value = news.date;
        document.getElementById('edit-news-category').value = news.category;
        document.getElementById('edit-news-tags').value = news.tags.join(', ');
        document.getElementById('edit-news-image').value = news.image || '';
        document.getElementById('edit-news-featured').checked = news.featured || false;

        this.openModal('edit-modal');
    }

    saveEdit() {
        const formData = this.getFormData('edit-news-form');
        
        if (!this.validateFormData(formData)) {
            return;
        }

        const newsIndex = this.newsData.news.findIndex(n => n.id === this.editingNewsId);
        if (newsIndex === -1) return;

        this.newsData.news[newsIndex] = {
            ...this.newsData.news[newsIndex],
            ...formData,
            tags: formData.tags.split(',').map(tag => tag.trim()).filter(tag => tag)
        };

        this.saveNewsData();
        this.showNotification('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
        this.closeModal();
        this.renderNewsList();
    }

    duplicateNews(id) {
        const news = this.newsData.news.find(n => n.id === id);
        if (!news) return;

        const newId = Math.max(...this.newsData.news.map(n => n.id), 0) + 1;
        const duplicatedNews = {
            ...news,
            id: newId,
            title: `${news.title} (–∫–æ–ø–∏—è)`,
            date: new Date().toISOString().split('T')[0],
            featured: false
        };

        this.newsData.news.unshift(duplicatedNews);
        this.saveNewsData();
        this.showNotification('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∞', 'success');
        this.renderNewsList();
    }

    deleteNews(id) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?')) {
            return;
        }

        const newsIndex = this.newsData.news.findIndex(n => n.id === id);
        if (newsIndex === -1) return;

        this.newsData.news.splice(newsIndex, 1);
        this.saveNewsData();
        this.showNotification('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', 'success');
        this.renderNewsList();
    }

    getFormData(formId) {
        const form = document.getElementById(formId);
        const formData = new FormData(form);
        
        return {
            title: formData.get('news-title') || formData.get('edit-news-title') || '',
            excerpt: formData.get('news-excerpt') || formData.get('edit-news-excerpt') || '',
            content: formData.get('news-content') || formData.get('edit-news-content') || '',
            date: formData.get('news-date') || formData.get('edit-news-date') || '',
            category: formData.get('news-category') || formData.get('edit-news-category') || '',
            tags: formData.get('news-tags') || formData.get('edit-news-tags') || '',
            image: formData.get('news-image') || formData.get('edit-news-image') || '',
            featured: formData.get('news-featured') || formData.get('edit-news-featured') ? true : false
        };
    }

    validateFormData(data) {
        console.log('–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:', data); // –û—Ç–ª–∞–¥–∫–∞
        
        const missingFields = [];
        
        if (!data.title || data.title.trim() === '') missingFields.push('–ó–∞–≥–æ–ª–æ–≤–æ–∫');
        if (!data.excerpt || data.excerpt.trim() === '') missingFields.push('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ');
        if (!data.content || data.content.trim() === '') missingFields.push('–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç');
        if (!data.date || data.date.trim() === '') missingFields.push('–î–∞—Ç–∞');
        if (!data.category || data.category.trim() === '') missingFields.push('–ö–∞—Ç–µ–≥–æ—Ä–∏—è');
        
        console.log('–ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è:', missingFields); // –û—Ç–ª–∞–¥–∫–∞
        
        if (missingFields.length > 0) {
            this.showNotification(`–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`, 'error');
            this.highlightMissingFields(missingFields);
            return false;
        }
        return true;
    }

    highlightMissingFields(missingFields) {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
        document.querySelectorAll('.field-error').forEach(field => {
            field.classList.remove('field-error');
        });

        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        missingFields.forEach(fieldName => {
            let fieldId = '';
            switch(fieldName) {
                case '–ó–∞–≥–æ–ª–æ–≤–æ–∫':
                    fieldId = 'news-title';
                    break;
                case '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ':
                    fieldId = 'news-excerpt';
                    break;
                case '–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç':
                    fieldId = 'news-content';
                    break;
                case '–î–∞—Ç–∞':
                    fieldId = 'news-date';
                    break;
                case '–ö–∞—Ç–µ–≥–æ—Ä–∏—è':
                    fieldId = 'news-category';
                    break;
            }
            
            if (fieldId) {
                const field = document.getElementById(fieldId);
                if (field) {
                    field.classList.add('field-error');
                    field.focus();
                }
            }
        });
    }

    showPreview() {
        const formData = this.getFormData('add-news-form');
        
        if (!this.validateFormData(formData)) {
            return;
        }

        const previewContent = document.getElementById('preview-content');
        previewContent.innerHTML = `
            <div class="preview-news">
                <div class="preview-header">
                    <h2>${formData.title}</h2>
                    <div class="preview-meta">
                        <span class="date">${this.formatDate(formData.date)}</span>
                        <span class="category">${formData.category}</span>
                        ${formData.featured ? '<span class="featured-badge">–ì–ª–∞–≤–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å</span>' : ''}
                    </div>
                </div>
                <div class="preview-excerpt">
                    <p>${formData.excerpt}</p>
                </div>
                <div class="preview-content">
                    ${this.convertMarkdownToHTML(formData.content)}
                </div>
                <div class="preview-tags">
                    ${formData.tags.split(',').map(tag => `<span class="tag">${tag.trim()}</span>`).join('')}
                </div>
            </div>
        `;

        this.openModal('preview-modal');
    }

    convertMarkdownToHTML(text) {
        return text
            .replace(/^## (.*$)/gim, '<h2>$1</h2>')
            .replace(/^### (.*$)/gim, '<h3>$1</h3>')
            .replace(/^\- (.*$)/gim, '<li>$1</li>')
            .replace(/^> (.*$)/gim, '<blockquote><p>$1</p></blockquote>')
            .replace(/\n\n/g, '</p><p>')
            .replace(/^(.*)$/gim, '<p>$1</p>')
            .replace(/<p><h2>/g, '<h2>')
            .replace(/<\/h2><\/p>/g, '</h2>')
            .replace(/<p><h3>/g, '<h3>')
            .replace(/<\/h3><\/p>/g, '</h3>')
            .replace(/<p><li>/g, '<li>')
            .replace(/<\/li><\/p>/g, '</li>')
            .replace(/<p><blockquote>/g, '<blockquote>')
            .replace(/<\/blockquote><\/p>/g, '</blockquote>')
            .replace(/<li>(.*?)<\/li>/g, '<ul><li>$1</li></ul>')
            .replace(/<\/ul><ul>/g, '');
    }

    updateStats() {
        if (!this.newsData.news) return;

        document.getElementById('total-news').textContent = this.newsData.news.length;
        document.getElementById('featured-news').textContent = this.newsData.news.filter(n => n.featured).length;
        
        const categories = new Set(this.newsData.news.map(n => n.category));
        document.getElementById('categories-count').textContent = categories.size;
    }

    setDefaultDate() {
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('news-date').value = today;
    }

    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    }

    openModal(modalId) {
        document.getElementById(modalId).classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    closeModal() {
        document.querySelectorAll('.modal').forEach(modal => {
            modal.classList.remove('active');
        });
        document.body.style.overflow = 'auto';
        this.editingNewsId = null;
    }

    showNotification(message, type = 'success') {
        const notifications = document.getElementById('notifications');
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;

        notifications.appendChild(notification);

        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    exportData() {
        const dataStr = JSON.stringify(this.newsData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `news-backup-${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        
        URL.revokeObjectURL(url);
        this.showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    }

    importData(file) {
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const importedData = JSON.parse(e.target.result);
                if (importedData.news && Array.isArray(importedData.news)) {
                    this.newsData = importedData;
                    this.saveNewsData();
                    this.renderNewsList();
                    this.updateStats();
                    this.showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
                } else {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
                }
            } catch (error) {
                this.showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞', 'error');
            }
        };
        reader.readAsText(file);
    }

    createBackup() {
        const backup = {
            ...this.newsData,
            backupDate: new Date().toISOString(),
            version: '1.0'
        };

        const dataStr = JSON.stringify(backup, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `news-backup-${new Date().toISOString().replace(/[:.]/g, '-')}.json`;
        link.click();
        
        URL.revokeObjectURL(url);
        this.showNotification('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞', 'success');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
document.addEventListener('DOMContentLoaded', () => {
    window.adminPanel = new AdminPanel();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML
window.editNews = (id) => window.adminPanel.editNews(id);
window.duplicateNews = (id) => window.adminPanel.duplicateNews(id);
window.deleteNews = (id) => window.adminPanel.deleteNews(id);
