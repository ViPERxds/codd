// Documents Page JavaScript

class DocumentsPage {
    constructor() {
        this.currentCategory = 'all';
        this.documentsData = [];
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadDocuments();
    }

    async loadDocuments(){
        try{
            // ensure apiUtils exists (fallback)
            if (!window.apiUtils) {
                (function(){
                    function getApiBase(){ try { return window.API_BASE || ''; } catch(_) { return ''; } }
                    async function fetchNoCacheJSON(url){ const ts = Date.now(); const sep = url.includes('?') ? '&' : '?'; const res = await fetch(`${url}${sep}ts=${ts}`, { cache: 'no-store' }); if(!res.ok) throw new Error(`HTTP ${res.status}`); return res.json(); }
                    function safeGet(obj, path, fb){ try { return path.split('.').reduce((a,k)=> (a&&a[k]!==undefined?a[k]:undefined), obj) ?? fb; } catch(_) { return fb; } }
                    window.apiUtils = { getApiBase, fetchNoCacheJSON, safeGet };
                })();
            }
            const apiBase = window.apiUtils.getApiBase() || '';
            const res = await window.apiUtils.fetchNoCacheJSON(`${apiBase}/api/documents?limit=100`);
            this.documentsData = res?.data || res || [];
            this.renderDocuments();
        }catch(e){
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ API:', e);
            this.showNoDocumentsMessage();
        }
    }

    showNoDocumentsMessage() {
        const grid = document.querySelector('#documentsContainer');
        if(!grid) return;
        grid.innerHTML = '<div class="error-message"><h3>–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3><p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∑–∂–µ</p></div>';
    }

    renderDocuments(){
        const grid = document.querySelector('#documentsContainer');
        if(!grid) return;
        const items = Array.isArray(this.documentsData) ? this.documentsData : [];
        if(items.length === 0){
            grid.innerHTML = '<div class="error-message"><h3>–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3><p>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p></div>';
            return;
        }
        grid.innerHTML = items.map(d => {
            const title = d.title || d.name || '–î–æ–∫—É–º–µ–Ω—Ç';
            const desc = d.description || d.category || '';
            const size = d.fileSize ? `${Math.round(d.fileSize/1024)} –ö–ë` : '';
            const dateStr = d.publishedAt || d.createdAt || d.updatedAt || d.date;
            const date = dateStr ? new Date(dateStr).toLocaleDateString('ru-RU') : '';
            const href = `${window.apiUtils?.getApiBase() || ''}/api/documents/${d.id}/download`;
            const cat = d.category || 'general';
            const type = d.fileType || '';
            return `
                <article class="document-card" data-category="${cat}">
                  <div class="document-icon">üìÑ</div>
                  <div class="document-content">
                    <h3 class="document-title">${title}</h3>
                    <p class="document-description">${desc}</p>
                    <div class="document-meta">
                      <span class="document-date">${date}</span>
                      <span class="document-type">${type}</span>
                      <span class="document-size">${size}</span>
                    </div>
                    <div class="document-actions">
                      <a class="btn btn-primary download-btn" href="#" data-document-id="${d.id}">üì• –°–∫–∞—á–∞—Ç—å</a>
                      <a class="btn btn-outline" href="#" data-document-id="${d.id}">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</a>
                    </div>
                  </div>
                </article>`;
        }).join('');
        // –ø—Ä–∏–º–µ–Ω–∏–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        this.switchCategory(this.currentCategory);
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const category = e.target.dataset.category;
                this.switchCategory(category);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('download-btn')) {
                e.preventDefault();
                const documentId = e.target.dataset.documentId;
                if (documentId) {
                    this.downloadDocument(documentId);
                }
            } else if (e.target.classList.contains('btn-outline') && e.target.textContent.includes('–ü—Ä–æ—Å–º–æ—Ç—Ä')) {
                e.preventDefault();
                const documentId = e.target.dataset.documentId;
                if (documentId) {
                    this.viewDocument(documentId);
                }
            }
        });
    }

    async downloadDocument(documentId) {
        try {
            const apiBase = window.apiUtils?.getApiBase() || '';
            const downloadUrl = `${apiBase}/api/documents/${documentId}/download`;
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const link = document.createElement('a');
            link.href = downloadUrl;
            link.download = '';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞');
        }
    }

    async viewDocument(documentId) {
        try {
            const apiBase = window.apiUtils?.getApiBase() || '';
            const viewUrl = `${apiBase}/api/documents/${documentId}/view`;
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            window.open(viewUrl, '_blank');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
        }
    }

    switchCategory(category) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-category="${category}"]`).classList.add('active');

        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        const documentCards = document.querySelectorAll('.document-card');
        
        documentCards.forEach(card => {
            const cardCategory = card.dataset.category;
            
            if (category === 'all' || cardCategory === category) {
                card.classList.remove('hidden');
                card.style.animation = 'fadeInUp 0.6s ease forwards';
            } else {
                card.classList.add('hidden');
            }
        });

        this.currentCategory = category;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
document.addEventListener('DOMContentLoaded', () => {
    if (document.querySelector('.documents-section')) {
        window.documentsPage = new DocumentsPage();
    }
});